{"version":3,"sources":["actions/campgrounds.js","middleware/campgroundsMiddleware.js","actions/currentCampground.js","actions/newCampground.js","middleware/currentCampgroundMiddleware.js","middleware/newCampgroundMiddleware.js","reducers/campgroundsReducer.js","reducers/currentCampgroundReducer.js","reducers/newCampgroundReducer.js","reducers/index.js","store/index.js","components/Navbar/logo.png","components/Navbar/index.js","components/Home/CampgroundSmall.js","components/Spinner/index.js","components/Home/index.js","containers/Home/index.js","hooks/useOutsideClick.js","components/Campground/Comment.js","components/Campground/index.js","containers/Campground/index.js","components/NewCampgroundForm/index.js","containers/NewCampgroundForm/index.js","components/EditCampgroundForm/index.js","containers/EditCampgroundForm/index.js","components/NotFound/index.js","components/Page/index.js","containers/Page/index.js","components/App/index.js","containers/App/index.js","index.js"],"names":["FETCH_CAMPGROUNDS","SAVE_CAMPGROUNDS","TOGGLE_LOADING_CAMPGROUNDS","campgroundsMiddleware","store","next","action","type","axios","get","then","response","campgrounds","dispatch","data","catch","error","console","log","finally","FETCH_SELECTED_CAMPGROUND","SAVE_SELECTED_CAMPGROUND","SAVE_AUTHOR","SAVE_COMMENTS","TOGGLE_LOADING_SELECTED_CAMPGROUND","SUBMIT_EDITED_CAMPGROUND","UPDATE_EDIT_FIELD","DELETE_SELECTED_CAMPGROUND","TOGGLE_CAMPGROUND_DELETED","UPDATE_EDIT_COMMENT_FIELD","TOGGLE_COMMENT_EDITING","SUBMIT_EDITED_COMMENT","SAVE_EDITED_COMMENT_ID","DELETE_COMMENT","REMOVE_COMMENT","TOGGLE_ADD_COMMENT_EDITING","UPDATE_ADD_COMMENT_FIELD","SUBMIT_NEW_COMMENT","ADD_COMMENT","fetchSelectedCampground","id","toggleAddCommentEditing","UPDATE_CAMPGROUND_FIELD","SUBMIT_CAMPGROUND","SAVE_CAMPGROUND_ID","TOGGLE_LOADING_CAMPGROUND_ID","saveCampgroundId","campgroundId","toggleLoadingCampgroundId","firstResponse","selectedCampground","user_id","secondResponse","author","username","thirdResponse","comments","saveComments","put","title","getState","image","description","country","comment","find","commentId","text","editedCommentId","delete","post","currentCampground","newCommentValue","fullComment","addComment","status","newCampgroundMiddleware","initialState","campgroundsList","loadingCampgrounds","campgroundsReducer","state","loadingSelectedCampground","commentEditing","selectedCommentId","addCommentEditing","campgroundDeleted","currentCampgroundReducer","fieldName","newValue","map","filter","loadingCampgroundId","newCampgroundReducer","rootReducer","combineReducers","newCampground","enhancers","composeWithDevTools","applyMiddleware","currentCampgroundMiddleware","createStore","reducer","Navbar","className","to","exact","src","logo","alt","activeClassName","CampgroundSmall","Spinner","Home","campground","connect","useOutsideClick","ref","callback","handleClick","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","Comment","modified_at","toggleCommentEditing","submitEditedComment","changeCommentField","deleteComment","textAreaRef","useRef","diffDays","Math","floor","Date","now","toString","value","onChange","event","onKeyUp","key","onDoubleClick","onClick","Campground","loadSelectedCampground","changeAddCommentField","submitNewComment","deleteCampground","useParams","history","useHistory","push","path","htmlFor","placeholder","length","updateEditCommentField","updateAddCommentField","deleteSelectedCampground","NewCampgroundForm","changeField","submitCampground","onSubmit","preventDefault","name","updateCampgroundField","EditCampgroundForm","submitEditedCampground","updateEditField","NotFound","Page","App","loadCampgrounds","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7b397608.chunk.js","sourcesContent":["// === action types\r\nexport const FETCH_CAMPGROUNDS = 'FETCH_CAMPGROUNDS';\r\nexport const SAVE_CAMPGROUNDS = 'SAVE_CAMPGROUNDS';\r\n\r\nexport const TOGGLE_LOADING_CAMPGROUNDS = 'TOGGLE_LOADING_CAMPGROUNDS';\r\n\r\n// === action creators\r\nexport const fetchCampgrounds = () => ({\r\n  type: FETCH_CAMPGROUNDS,\r\n});\r\n\r\nexport const saveCampgrounds = (campgrounds) => ({\r\n  type: SAVE_CAMPGROUNDS,\r\n  campgrounds: campgrounds,\r\n});\r\n\r\nexport const toggleLoadingCampgrounds = () => ({\r\n  type: TOGGLE_LOADING_CAMPGROUNDS,\r\n});\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  FETCH_CAMPGROUNDS,\r\n  saveCampgrounds,\r\n  toggleLoadingCampgrounds\r\n } from '../actions/campgrounds';\r\n\r\nconst campgroundsMiddleware = (store) => (next) => (action) => {\r\n\r\n  switch (action.type) {\r\n    case FETCH_CAMPGROUNDS:\r\n      axios.get('/api/campgrounds')\r\n        .then((response) => {\r\n          // we want to store response.data in the state\r\n          store.dispatch(saveCampgrounds(response.data));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error.response);\r\n        })\r\n        .finally(() => {\r\n          store.dispatch(toggleLoadingCampgrounds());\r\n        });\r\n      break;\r\n\r\n    default:\r\n  }\r\n\r\n  next(action);\r\n};\r\n\r\nexport default campgroundsMiddleware;","// === action types\n\nexport const FETCH_SELECTED_CAMPGROUND = 'FETCH_SELECTED_CAMPGROUND';\nexport const SAVE_SELECTED_CAMPGROUND = 'SAVE_SELECTED_CAMPGROUND';\n\nexport const SAVE_AUTHOR = 'SAVE_AUTHOR';\nexport const SAVE_COMMENTS = 'SAVE_COMMENTS';\n\nexport const TOGGLE_LOADING_SELECTED_CAMPGROUND = 'TOGGLE_LOADING_SELECTED_CAMPGROUND';\n\n// campground edition\nexport const SUBMIT_EDITED_CAMPGROUND = 'SUBMIT_EDITED_CAMPGROUND';\nexport const UPDATE_EDIT_FIELD = 'UPDATE_EDIT_FIELD';\n\n// campground deleting\nexport const DELETE_SELECTED_CAMPGROUND = 'DELETE_SELECTED_CAMPGROUND';\nexport const TOGGLE_CAMPGROUND_DELETED = 'TOGGLE_CAMPGROUND_DELETED';\n\n// campground comment edition\nexport const UPDATE_EDIT_COMMENT_FIELD = 'UPDATE_EDIT_COMMENT_FIELD';\n\nexport const TOGGLE_COMMENT_EDITING = 'TOGGLE_COMMENT_EDITING';\nexport const SUBMIT_EDITED_COMMENT = 'SUBMIT_EDITED_COMMENT';\nexport const SAVE_EDITED_COMMENT_ID = 'SAVE_EDITED_COMMENT_ID';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\nexport const REMOVE_COMMENT = 'REMOVE_COMMENT';\n\n// campground comment adding\nexport const TOGGLE_ADD_COMMENT_EDITING = 'TOGGLE_ADD_COMMENT_EDITING';\nexport const UPDATE_ADD_COMMENT_FIELD = 'UPDATE_ADD_COMMENT_FIELD';\nexport const SUBMIT_NEW_COMMENT = 'SUBMIT_NEW_COMMENT';\nexport const ADD_COMMENT = 'ADD_COMMENT';\n\n\n// === action creators\n\nexport const fetchSelectedCampground = (id) => ({\n  type: FETCH_SELECTED_CAMPGROUND,\n  id: id,\n});\n\nexport const saveSelectedCampground = (selectedCampground) => ({\n  type: SAVE_SELECTED_CAMPGROUND,\n  selectedCampground: selectedCampground,\n});\n\nexport const saveAuthor = (author) => ({\n  type: SAVE_AUTHOR,\n  author: author,\n});\n\nexport const saveComments = (comments) => ({\n  type: SAVE_COMMENTS,\n  comments: comments,\n});\n\nexport const toggleLoadingSelectedCampground = () => ({\n  type: TOGGLE_LOADING_SELECTED_CAMPGROUND,\n});\n\nexport const updateEditField = (newValue, fieldName) => ({\n  type: UPDATE_EDIT_FIELD,\n  newValue: newValue,\n  fieldName: fieldName,\n});\n\nexport const toggleCommentEditing = (commentId) => ({\n  type: TOGGLE_COMMENT_EDITING,\n  commentId: commentId\n});\n\nexport const submitEditedCampground = (campgroundId) => ({\n  type: SUBMIT_EDITED_CAMPGROUND,\n  campgroundId: campgroundId\n});\n\nexport const submitEditedComment = (commentId) => ({\n  type: SUBMIT_EDITED_COMMENT,\n  commentId: commentId\n});\n\nexport const deleteComment = (commentId) => ({\n  type: DELETE_COMMENT,\n  commentId: commentId\n});\n\nexport const removeComment = (commentId) => ({\n  type: REMOVE_COMMENT,\n  commentId: commentId\n});\n\n\nexport const updateEditCommentField = (newValue, commentId) => ({\n  type: UPDATE_EDIT_COMMENT_FIELD,\n  newValue: newValue,\n  commentId: commentId\n});\n\nexport const saveEditedCommentId = (editedCommentId) => ({\n  type: SAVE_EDITED_COMMENT_ID,\n  editedCommentId: editedCommentId\n});\n\nexport const toggleAddCommentEditing = () => ({\n  type: TOGGLE_ADD_COMMENT_EDITING\n});\n\nexport const updateAddCommentField = (newValue) => ({\n  type: UPDATE_ADD_COMMENT_FIELD,\n  newValue: newValue\n});\n\nexport const submitNewComment = (campgroundId) => ({\n  type: SUBMIT_NEW_COMMENT,\n  campgroundId: campgroundId\n});\n\nexport const addComment = (comment) => ({\n  type: ADD_COMMENT,\n  comment: comment\n});\n\nexport const deleteSelectedCampground = (campgroundId) => ({\n  type: DELETE_SELECTED_CAMPGROUND,\n  campgroundId: campgroundId\n});\n\nexport const toggleCampgroundDeleted = () => ({\n  type: TOGGLE_CAMPGROUND_DELETED,\n});","// === action types\nexport const UPDATE_CAMPGROUND_FIELD = 'UPDATE_CAMPGROUND_FIELD';\n\nexport const SUBMIT_CAMPGROUND = 'SUBMIT_CAMPGROUND';\nexport const SAVE_CAMPGROUND_ID = 'SAVE_CAMPGROUND_ID';\n\nexport const TOGGLE_LOADING_CAMPGROUND_ID = 'TOGGLE_LOADING_CAMPGROUND_ID';\n\n\n\n// === action creators\n\nexport const updateCampgroundField = (newValue, fieldName) => ({\n  type: UPDATE_CAMPGROUND_FIELD,\n  newValue: newValue,\n  fieldName: fieldName,\n});\n\nexport const submitCampground = () => ({\n  type: SUBMIT_CAMPGROUND,\n});\n\nexport const saveCampgroundId = (campgroundId) => ({\n  type: SAVE_CAMPGROUND_ID,\n  campgroundId: campgroundId\n});\n\nexport const toggleLoadingCampgroundId = () => ({\n  type: TOGGLE_LOADING_CAMPGROUND_ID,\n});\n","import axios from 'axios';\n\nimport {\n  FETCH_SELECTED_CAMPGROUND,\n  saveSelectedCampground,\n  saveAuthor,\n  saveComments,\n  toggleLoadingSelectedCampground,\n  SUBMIT_EDITED_CAMPGROUND,\n  SUBMIT_EDITED_COMMENT,\n  saveEditedCommentId,\n  DELETE_COMMENT,\n  removeComment,\n  SUBMIT_NEW_COMMENT,\n  addComment,\n  toggleAddCommentEditing,\n  DELETE_SELECTED_CAMPGROUND,\n  toggleCampgroundDeleted\n} from '../actions/currentCampground';\n\nimport {\n  saveCampgroundId,\n  toggleLoadingCampgroundId,\n} from '../actions/newCampground';\n\nconst campgroundsMiddleware = (store) => (next) => (action) => {\n\n  switch (action.type) {\n    case FETCH_SELECTED_CAMPGROUND:\n      axios.get(`/api/campgrounds/${action.id}`)\n        .then((firstResponse) => {\n          store.dispatch(saveSelectedCampground(firstResponse.data));\n          return axios.get(`/api/users/${firstResponse.data.user_id}`);\n        })\n        .then((secondResponse) => {\n          store.dispatch(saveAuthor(secondResponse.data.username));\n          return axios.get(`/api/campgrounds/${action.id}/comments`);\n        })\n        .then((thirdResponse) => {\n          if (thirdResponse.data) {\n            store.dispatch(saveComments(thirdResponse.data));\n          }\n        })\n        .catch((error) => {\n          console.log(error.response);\n        })\n        .finally(() => {\n          store.dispatch(toggleLoadingSelectedCampground());\n        });\n      break;\n\n    case SUBMIT_EDITED_CAMPGROUND:\n      // we send a put request using the information in state\n      axios.put(`/api/campgrounds/${action.campgroundId}`, {\n        title: store.getState().campgrounds.selectedCampground.title,\n        image: store.getState().campgrounds.selectedCampground.image,\n        description: store.getState().campgrounds.selectedCampground.description,\n        country: store.getState().campgrounds.selectedCampground.country,\n        // user_id: only the user who posted this record can change it\n        // this means the user_id won't change and is not relevant here\n      })\n        .then((response) => {\n          // once we get the id of the edited campground from the database\n          // we save it in state\n          // (here, receiving the id represents the fact the record has been updated in db)\n          store.dispatch(saveCampgroundId(response.data.id));\n        })\n        .catch((error) => {\n          console.log(error.response);\n        })\n        .finally(() => {\n          // once the request is finished, we toggle the boolean\n          // which represents if campground id is loaded\n          store.dispatch(toggleLoadingCampgroundId());\n        });\n      break;\n\n    case SUBMIT_EDITED_COMMENT:\n      const comments = store.getState().campgrounds.comments;\n      const comment = comments.find((comment) => comment.id === action.commentId);\n      axios.put(`/api/comments/${action.commentId}`, {\n        text: comment.text\n      })\n        .then((response) => {\n          store.dispatch(saveEditedCommentId(response.data.id));\n        })\n        .catch((error) => {\n          console.log(error.response);\n        })\n      break;\n\n    case DELETE_COMMENT:\n      console.log(action.commentId);\n      axios.delete(`/api/comments/${action.commentId}`)\n        .then((response) => {\n          console.log(response.data);\n        })\n        .catch((error) => {\n          console.log(error.response);\n        })\n        .finally(() => {\n          store.dispatch(removeComment(action.commentId));\n        })\n      break;\n\n    case SUBMIT_NEW_COMMENT:\n      axios.post(`/api/campgrounds/${action.campgroundId}/comments`, {\n        text: store.getState().currentCampground.newCommentValue,\n        // TODO: get the logged user when login feature is ready\n        // user_id hard-coded for now\n        user_id: 1\n      })\n        .then((response) => {\n          // I will need to get the username in the state once the login feature is up and running\n          // I will then create the comment structure I want to add to the comments array in state\n          // username is hard-coded for now\n          const fullComment = { ...response.data, author: 'carrot' };\n\n          // Now I can dispatch the action with the proper comment structure\n          store.dispatch(addComment(fullComment));\n          store.dispatch(toggleAddCommentEditing());\n        })\n        .catch((error) => {\n          console.log(error.response);\n        });\n      break;\n\n    case DELETE_SELECTED_CAMPGROUND:\n      console.log(\"action : \", typeof (action.campgroundId));\n      axios.delete(`/api/campgrounds/${action.campgroundId}`)\n        .then((response) => {\n          if (response.status !== 200) {\n          console.log(response.data);\n          }\n          store.dispatch(toggleCampgroundDeleted());\n        })\n        .catch((error) => {\n          console.log(error.response);\n        });\n      break;\n\n    default:\n  }\n\n  next(action);\n};\n\nexport default campgroundsMiddleware;","import axios from 'axios';\n\nimport {\n  SUBMIT_CAMPGROUND,\n  saveCampgroundId,\n  toggleLoadingCampgroundId\n} from '../actions/newCampground';\n\nconst newCampgroundMiddleware = (store) => (next) => (action) => {\n\n  switch (action.type) {\n    case SUBMIT_CAMPGROUND:\n      // we post the new campground using the information in state\n      axios.post('/api/campgrounds', {\n        title: store.getState().campgrounds.title,\n        image: store.getState().campgrounds.image,\n        description: store.getState().campgrounds.description,\n        country: store.getState().campgrounds.country,\n        // user_id hard-coded for now\n        user_id: 1\n      })\n        .then((response) => {\n          // once we get the id of the new campground from the database\n          // we save it in state\n          store.dispatch(saveCampgroundId(response.data.id));\n        })\n        .catch((error) => {\n          console.log(error.response);\n        })\n        .finally(() => {\n          // once the request is finished, we toggle the boolean\n          // which represents if campground id is available\n          store.dispatch(toggleLoadingCampgroundId());\n        });\n      break;\n\n    \n\n    default:\n  }\n\n  next(action);\n};\n\nexport default newCampgroundMiddleware;","import {\r\n  SAVE_CAMPGROUNDS,\r\n  TOGGLE_LOADING_CAMPGROUNDS,\r\n} from '../actions/campgrounds'\r\n\r\nconst initialState = {\r\n  campgroundsList: [],\r\n  loadingCampgrounds: true,\r\n};\r\n\r\nfunction campgroundsReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SAVE_CAMPGROUNDS:\r\n      return {\r\n        ...state,\r\n        campgroundsList: action.campgrounds,\r\n      };\r\n\r\n    case TOGGLE_LOADING_CAMPGROUNDS:\r\n      return {\r\n        ...state,\r\n        loadingCampgrounds: !state.loadingCampgrounds,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default campgroundsReducer;","import {\n  SAVE_SELECTED_CAMPGROUND,\n  SAVE_AUTHOR,\n  SAVE_COMMENTS,\n  TOGGLE_LOADING_SELECTED_CAMPGROUND,\n  UPDATE_EDIT_FIELD,\n  TOGGLE_COMMENT_EDITING,\n  UPDATE_EDIT_COMMENT_FIELD,\n  SAVE_EDITED_COMMENT_ID,\n  REMOVE_COMMENT,\n  TOGGLE_ADD_COMMENT_EDITING,\n  UPDATE_ADD_COMMENT_FIELD,\n  ADD_COMMENT,\n  TOGGLE_CAMPGROUND_DELETED\n} from '../actions/currentCampground'\n\nconst initialState = {\n  selectedCampground: {},\n  author: '',\n  comments: [],\n  loadingSelectedCampground: true,\n  commentEditing: false,\n  selectedCommentId: '',\n  editedCommentId: '',\n  addCommentEditing: false,\n  newCommentValue: '',\n  campgroundDeleted: false\n};\n\nfunction currentCampgroundReducer(state = initialState, action) {\n  switch (action.type) {\n\n    case SAVE_SELECTED_CAMPGROUND:\n      return {\n        ...state,\n        selectedCampground: action.selectedCampground,\n      };\n\n    case SAVE_AUTHOR:\n      return {\n        ...state,\n        author: action.author,\n      };\n\n    case SAVE_COMMENTS:\n      return {\n        ...state,\n        comments: action.comments,\n      };\n\n    case TOGGLE_LOADING_SELECTED_CAMPGROUND:\n      return {\n        ...state,\n        loadingSelectedCampground: false,\n      };\n\n    case UPDATE_EDIT_FIELD:\n      return {\n        ...state,\n        selectedCampground: {\n          ...state.selectedCampground,\n          [action.fieldName]: action.newValue\n        }\n      };\n\n    case TOGGLE_COMMENT_EDITING:\n      return {\n        ...state,\n        commentEditing: !state.commentEditing,\n        selectedCommentId: action.commentId\n      };\n\n    case UPDATE_EDIT_COMMENT_FIELD:\n      return {\n        ...state,\n        comments: state.comments.map((comment) => {\n          if (comment.id === action.commentId) {\n            return {\n              ...comment,\n              text: action.newValue\n            }\n          } else {\n            return comment;\n          }\n        })\n      };\n\n    case SAVE_EDITED_COMMENT_ID:\n      return {\n        ...state,\n        editedCommentId: action.editedCommentId,\n        commentEditing: false,\n      };\n\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        comments: state.comments.filter(comment => comment.id !== action.commentId)\n      };\n\n    case TOGGLE_ADD_COMMENT_EDITING:\n      return {\n        ...state,\n        addCommentEditing: !state.addCommentEditing\n      };\n\n    case UPDATE_ADD_COMMENT_FIELD:\n      return {\n        ...state,\n        newCommentValue: action.newValue\n      };\n\n    case ADD_COMMENT:\n      return {\n        ...state,\n        comments: [...state.comments, action.comment],\n        newCommentValue: ''\n      }\n\n    case TOGGLE_CAMPGROUND_DELETED:\n      return {\n        ...state,\n        campgroundDeleted: true\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default currentCampgroundReducer;","import {\n  UPDATE_CAMPGROUND_FIELD,\n  SAVE_CAMPGROUND_ID,\n  TOGGLE_LOADING_CAMPGROUND_ID\n} from '../actions/newCampground'\n\nconst initialState = {\n  title: '',\n  image: '',\n  description: '',\n  country: '',\n  campgroundId: '',\n  loadingCampgroundId: true,\n};\n\nfunction newCampgroundReducer (state = initialState, action) {\n  switch (action.type) {\n    case UPDATE_CAMPGROUND_FIELD:\n      return {\n        ...state,\n        [action.fieldName]: action.newValue,\n      };\n\n    case SAVE_CAMPGROUND_ID:\n      return {\n        ...state,\n        campgroundId: action.campgroundId,\n        // now the campground is created, we can reset the inputs\n        title: '',\n        image: '',\n        description: '',\n        country: ''\n      };\n\n    case TOGGLE_LOADING_CAMPGROUND_ID:\n      return {\n        ...state,\n        loadingCampgroundId: !state.loadingCampgroundId,\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default newCampgroundReducer;","import { combineReducers } from 'redux';\r\n\r\n// importing reducers\r\nimport campgroundsReducer from './campgroundsReducer';\r\nimport currentCampgroundReducer from './currentCampgroundReducer';\r\nimport newCampgroundReducer from './newCampgroundReducer';\r\n\r\n// this is the main reducer, which combines all the other reducers\r\n// combineReducers takes as argument an object which describes\r\n// the different \"drawers\"  of the state and which reducer reducer controls\r\n// each drawer\r\nconst rootReducer = combineReducers({\r\n  // drawer name: reducer which controls this part of the state\r\n  campgrounds: campgroundsReducer,\r\n  currentCampground: currentCampgroundReducer,\r\n  newCampground: newCampgroundReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport campgroundsMiddleware from '../middleware/campgroundsMiddleware';\r\nimport currentCampgroundMiddleware from '../middleware/currentCampgroundMiddleware';\r\nimport newCampgroundMiddleware from '../middleware/newCampgroundMiddleware';\r\n\r\n// combineReducers => we import the combined reducer\r\nimport reducer from '../reducers';\r\n\r\n// we combine devTools with the middlewares\r\nconst enhancers = composeWithDevTools(\r\n  applyMiddleware(\r\n    campgroundsMiddleware,\r\n    currentCampgroundMiddleware,\r\n    newCampgroundMiddleware,\r\n    // ... other middleware\r\n  ),\r\n);\r\n\r\nconst store = createStore(\r\n  // reducer\r\n  reducer,\r\n  // enhancer\r\n  enhancers,\r\n);\r\n\r\nexport default store;","export default __webpack_public_path__ + \"static/media/logo.5d95d43d.png\";","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport logo from \"./logo.png\";\nimport \"./navbar.scss\";\n\nconst Navbar = () => (\n  <nav className=\"nav\">\n    <div className=\"nav-container\">\n      <NavLink\n        to=\"/\"\n        className=\"nav-logo\"\n        exact\n      >\n        <img className=\"nav-logo-image\" src={logo} alt=\"Logo\"></img>\n        <div className=\"nav-brand\">Wildcamp</div>\n      </NavLink>\n      <div className=\"nav-items\">\n        <NavLink\n          to=\"/login\"\n          className=\"nav-item\"\n          activeClassName=\"nav-item-active\"\n        >\n          Connexion\n        </NavLink>\n        <NavLink\n          to=\"/signup\"\n          className=\"nav-item\"\n          activeClassName=\"nav-item-active\"\n        >\n          Inscription\n        </NavLink>\n      </div>\n    </div>\n  </nav>\n);\n\nexport default Navbar;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Link } from \"react-router-dom\";\n\nconst CampgroundSmall = ({ id, image, title }) => (\n  <article className=\"campground-small\">\n    <Link to={`/campground/${id}`} title=\"Afficher le spot\">\n      <img\n        src={image}\n        alt=\"\"\n      />\n      <div className=\"campground-small-content\">\n        <h2>{title}</h2>\n      </div>\n    </Link>\n  </article>\n);\n\nCampgroundSmall.propTypes = {\n  id: PropTypes.number.isRequired,\n  image: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default CampgroundSmall;\n","// == Import npm\r\nimport React from 'react';\r\n\r\n// == Import\r\nimport './spinner.scss';\r\n\r\nconst Spinner = () => <div className=\"spinner\" />;\r\n\r\n// == Export\r\nexport default Spinner;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './home.scss';\nimport CampgroundSmall from './CampgroundSmall';\nimport Spinner from '../Spinner';\nimport { Link } from 'react-router-dom';\n\nconst Home = ({ campgrounds, loadingCampgrounds }) => {\n  // console.log(campgrounds);\n\n  return (\n    <main className=\"home\">\n      <h1 className=\"home-title\">Bienvenue dans Wildcamp</h1>\n      <p className=\"home-subtitle\">Découvrez les meilleurs spots de camping sauvage partagés par la communauté Wildcamp :</p>\n      {loadingCampgrounds && <Spinner />}\n      {!loadingCampgrounds &&\n        <div className=\"campgrounds-small\">\n          {campgrounds.map((campground) => (\n            <CampgroundSmall key={campground.id} {...campground} />\n          ))}\n        </div>\n      }\n      <div className=\"add-campground\">\n        <p className=\"add-campground-subtitle\">Vous avez découvert un spot unique et vous souhaitez le partager&nbsp;? C'est par ici&nbsp;!</p>\n        <Link\n          className=\"add-campground-button\"\n          to=\"/new-campground\"\n        >\n          Ajouter un spot\n        </Link>\n      </div>\n    </main>\n  );\n};\n\nHome.propTypes = {\n  campgrounds: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      image: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      country: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default Home;","import { connect } from 'react-redux';\r\n\r\n// importing presentational component\r\nimport Home from '../../components/Home';\r\n\r\n// === mapStateToProps\r\n// if we need to read information from the state\r\nconst mapStateToProps = (state) => ({\r\n  // name of the prop to specify: element to get from the state\r\n  campgrounds: state.campgrounds.campgroundsList,\r\n  loadingCampgrounds: state.campgrounds.loadingCampgrounds,\r\n});\r\n\r\n// === mapDispatchToProps\r\n// if we need to dispatch actions from the store (modify the state)\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  // name of the prop to specify: function which will dispatch the action\r\n});\r\n\r\n// === creating the assistant\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","// hook created by to Kevin FeliSilda\n// https://medium.com/@kevinfelisilda/click-outside-element-event-using-react-hooks-2c540814b661\n// This hook helps to define processing when we click away from (outside of) an element\nimport { useEffect } from \"react\";\n\nconst useOutsideClick = (ref, callback) => {\n  const handleClick = e => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClick);\n\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  });\n};\n\nexport default useOutsideClick;","import React, { useRef } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useOutsideClick from \"../../hooks/useOutsideClick\";\r\n\r\nconst Comment = ({\r\n  id,\r\n  author,\r\n  text,\r\n  modified_at,\r\n  commentEditing,\r\n  selectedCommentId,\r\n  toggleCommentEditing,\r\n  submitEditedComment,\r\n  changeCommentField,\r\n  deleteComment\r\n}) => {\r\n\r\n  const textAreaRef = useRef();\r\n\r\n  // when the user double-clicked on a comment, it changes the comment into an editable mode\r\n  // when the user clicks outside this textarea, the editing mode is changed to false\r\n  useOutsideClick(textAreaRef, () => {\r\n    toggleCommentEditing();\r\n  });\r\n\r\n  // Calculating how long ago the comment was posted\r\n  const msInADay = 1000 * 60 * 60 * 24;\r\n  const diffDays = Math.floor((Date.now() - new Date(modified_at)) / msInADay);\r\n\r\n  return (\r\n    <div className=\"comment\" >\r\n      <div className=\"comment-info\">\r\n        <p className=\"comment-author\">{author}</p>\r\n        {diffDays <= 1 &&\r\n          <span className=\"comment-date\">\r\n            il y a {diffDays} jour\r\n          </span>\r\n        }\r\n        {diffDays > 1 &&\r\n          <span className=\"comment-date\">\r\n            il y a {diffDays} jours\r\n          </span>\r\n        }\r\n      </div>\r\n      <div className=\"comment-commands\">\r\n        {(selectedCommentId === id.toString()) && commentEditing ?\r\n          <textarea\r\n            ref={textAreaRef}\r\n            className=\"edit-textarea\"\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(event) => {\r\n              changeCommentField(event.target.value, id);\r\n            }}\r\n            onKeyUp={(event) => {\r\n              if (event.key === 'Enter') {\r\n                submitEditedComment(id);\r\n              }\r\n            }}\r\n\r\n          />\r\n          : <div>\r\n            <p\r\n              className=\"comment-text\"\r\n              onDoubleClick={(event) => {\r\n                // TODO: add following conditions\r\n                // if loggedUser === author > toggle commentEditing\r\n                // else > display an error message stating the user cannot edit ohter users'comments\r\n                toggleCommentEditing(id.toString());\r\n              }}>\r\n              {text}\r\n            </p>\r\n            {/* TODO: add a condition to check loggedUser is author */}\r\n            <p className=\"edit-hint\">Double-cliquez pour modifier</p>\r\n          </div>\r\n        }\r\n\r\n        {/* TODO: add conditional display for this button group\r\n          if logged username is triple equal to comment author, display the button group */}\r\n        <div className=\"button-group\">\r\n          <button\r\n            className=\"delete-button\"\r\n            onClick={() => {\r\n              deleteComment(id);\r\n            }}\r\n          >\r\n            Supprimer\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n    </div >\r\n  );\r\n\r\n}\r\n\r\nComment.propTypes = {\r\n  author: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Comment;","import React, { useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport { useParams, Link, useHistory } from 'react-router-dom';\n\nimport \"./campground.scss\";\n\nimport Comment from './Comment';\nimport Spinner from '../Spinner';\n\nconst Campground = ({\n  loadingSelectedCampground,\n  selectedCampground,\n  loadSelectedCampground,\n  author,\n  comments,\n  commentEditing,\n  toggleCommentEditing,\n  selectedCommentId,\n  submitEditedComment,\n  changeCommentField,\n  deleteComment,\n  addCommentEditing,\n  toggleAddCommentEditing,\n  newCommentValue,\n  changeAddCommentField,\n  submitNewComment,\n  deleteCampground,\n  campgroundDeleted\n}) => {\n  const { id } = useParams();\n\n  const history = useHistory();\n  const editRouteChange = () => {\n    const path = `/edit-campground/${selectedCampground.id}`;\n    history.push(path);\n  }\n\n  // if the id in params of the url changes, we load the corresponding\n  // campground from db\n  useEffect(() => {\n    loadSelectedCampground(id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  // on campground deletion: if the value of campgroundDeleted\n  // changes and turns to true, we redirect to the home page\n  useEffect(() => {\n    if(campgroundDeleted) {\n      history.push('/');\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [campgroundDeleted]);\n\n  \n\n  return (\n    <main className=\"main\">\n      <div className=\"campground\">\n        <h1 className=\"campground-heading\">Spot Wildcamp</h1>\n        {loadingSelectedCampground && <Spinner />}\n\n        {!loadingSelectedCampground && (\n          <div>\n            <div className=\"campground-thumbnail\">\n              <img\n                className=\"campground-image\"\n                src={selectedCampground.image}\n                alt=\"Spot de camping sauvage\"\n              />\n              <div className=\"campground-details\">\n                <div className=\"campground-details-main\">\n                  <h2 className=\"campground-details-title\">{selectedCampground.title}</h2>\n                  <span className=\"campground-details-country\">{selectedCampground.country}</span>\n                </div>\n\n                <p className=\"campground-details-description\">\n                  {selectedCampground.description}\n                </p>\n                <div className=\"campground-details-commands\">\n                  <p className=\"author\">\n                    Partagé par : <span className=\"author-name\">{author}</span>\n                  </p>\n                  {/* TODO: add conditional display for this button group\n                  if logged username is triple equal to author, display the button group */}\n                  <div className=\"button-group\">\n                    <button\n                      className=\"edit-button\"\n                      onClick={editRouteChange}\n                    >\n                      Modifier\n                    </button>\n                    <button\n                      className=\"delete-button\"\n                      onClick={() => {\n                        console.log(\"campgroundId : \", id);\n                        deleteCampground(id);\n                      }}\n                    >\n                      Supprimer\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"comments-container\">\n              {!addCommentEditing &&\n                <div className=\"comment-button-container\">\n                  <button\n                    className=\"comment-button\"\n                    onClick={() => {\n                      toggleAddCommentEditing();\n                    }}\n                  >\n                    Ajouter un commentaire\n                  </button>\n                </div>\n              }\n              {addCommentEditing &&\n                  <div className=\"add-comment-container\">\n                    <label className=\"add-comment-label\" htmlFor=\"add-comment\">\n                      <textarea\n                        className=\"add-comment-textarea\"\n                        value={newCommentValue}\n                        title=\"add-comment\"\n                        placeholder=\"Ajoutez un commentaire...\"\n                        onChange={(event) => {\n                          changeAddCommentField(event.target.value);\n                        }}\n                      />\n                    </label>\n                    <div className=\"add-comment-button-container\">\n                    <button\n                      className=\"submit-comment\"\n                      onClick={() => {\n                        submitNewComment(selectedCampground.id);\n                      }}\n                    >\n                      Valider\n                    </button>\n                    <button className=\"cancel-comment\"\n                    onClick={()=> {\n                      toggleAddCommentEditing();\n                    }}>Annuler</button>\n                    </div>\n                  </div>\n              }\n              <hr />\n\n              <div className=\"comments\">\n                {comments &&\n                  comments.map((comment) => (\n                    <Comment\n                      key={comment.id}\n                      {...comment}\n                      commentEditing={commentEditing}\n                      toggleCommentEditing={toggleCommentEditing}\n                      selectedCommentId={selectedCommentId}\n                      submitEditedComment={submitEditedComment}\n                      changeCommentField={changeCommentField}\n                      deleteComment={deleteComment}\n                    />\n                  ))}\n                {!comments.length && (\n                  <p>Soyez le ou la première à partager un commentaire !</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"button-container\">\n              <Link\n                className=\"add-campground-button\"\n                to=\"/new-campground\"\n              >\n                Ajouter un nouveau spot\n              </Link>\n            </div>\n          </div>\n        )}\n      </div>\n    </main>\n  );\n}\n\nCampground.propTypes = {\n  loadingSelectedCampground: PropTypes.bool.isRequired,\n  loadSelectedCampground: PropTypes.func.isRequired,\n  selectedCampground: PropTypes.shape({\n    title: PropTypes.string,\n    image: PropTypes.string,\n    description: PropTypes.string,\n    country: PropTypes.string,\n  }).isRequired,\n  author: PropTypes.string.isRequired,\n  comments: PropTypes.array,\n};\n\nexport default Campground;\n","import { connect } from 'react-redux';\r\n\r\nimport {\r\n  fetchSelectedCampground,\r\n  toggleCommentEditing,\r\n  submitEditedComment,\r\n  updateEditCommentField,\r\n  deleteComment,\r\n  toggleAddCommentEditing,\r\n  updateAddCommentField,\r\n  submitNewComment,\r\n  deleteSelectedCampground\r\n} from '../../actions/currentCampground';\r\n\r\n// importing presentational component\r\nimport Campground from '../../components/Campground';\r\n\r\n// === mapStateToProps\r\n// if we need to read information from the state\r\nconst mapStateToProps = (state) => ({\r\n  // name of the prop to specify: element to get from the state\r\n  selectedCampground: state.currentCampground.selectedCampground,\r\n  author: state.currentCampground.author,\r\n  comments: state.currentCampground.comments,\r\n  loadingSelectedCampground: state.currentCampground.loadingSelectedCampground,\r\n  commentEditing: state.currentCampground.commentEditing,\r\n  selectedCommentId: state.currentCampground.selectedCommentId,\r\n  addCommentEditing: state.currentCampground.addCommentEditing,\r\n  newCommentValue: state.currentCampground.newCommentValue,\r\n  campgroundDeleted: state.currentCampground.campgroundDeleted\r\n});\r\n\r\n// === mapDispatchToProps\r\n// if we need to dispatch actions from the store (modify the state)\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  // name of the prop to specify: function which will dispatch the action\r\n  loadSelectedCampground: (id) => {\r\n    dispatch(fetchSelectedCampground(id));\r\n  },\r\n  toggleCommentEditing: (commentId) => {\r\n    dispatch(toggleCommentEditing(commentId));\r\n  },\r\n  submitEditedComment: (commentId) => {\r\n    dispatch(submitEditedComment(commentId));\r\n  },\r\n  changeCommentField: (newValue, commentId) => {\r\n    dispatch(updateEditCommentField(newValue, commentId));\r\n  },\r\n  deleteComment: (commentId) => {\r\n    dispatch(deleteComment(commentId));\r\n  },\r\n  toggleAddCommentEditing: () => {\r\n    dispatch(toggleAddCommentEditing());\r\n  },\r\n  changeAddCommentField: (newValue) => {\r\n    dispatch(updateAddCommentField(newValue));\r\n  },\r\n  submitNewComment: (campgroundId) => {\r\n    dispatch(submitNewComment(campgroundId));\r\n  },\r\n  deleteCampground: (campgroundId) => {\r\n    dispatch(deleteSelectedCampground(campgroundId));\r\n  }\r\n\r\n});\r\n\r\n// === creating the assistant\r\n// adding withRouter to be able to access params in container\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Campground);","import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"./newcampgroundform.scss\";\r\n\r\nconst NewCampgroundForm = ({\r\n  title,\r\n  image,\r\n  description,\r\n  country,\r\n  changeField,\r\n  submitCampground,\r\n  campgroundId,\r\n  loadingCampgroundId\r\n}) => {\r\n\r\n  const history = useHistory();\r\n  const routeChange = () => {\r\n    const path = `/`;\r\n    history.push(path);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!loadingCampgroundId) {\r\n      const path = `/campground/${campgroundId}`;\r\n      history.push(path);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"campground-form\">\r\n      <h2 className=\"heading\">Ajouter un spot de camping sauvage</h2>\r\n      <div className=\"content\" >\r\n        <form\r\n          className=\"form\"\r\n          onSubmit={(event) => {\r\n            event.preventDefault();\r\n            submitCampground();\r\n          }}\r\n        >\r\n          <label htmlFor=\"title\" className=\"label\">\r\n            Titre*:\r\n            <input\r\n              type=\"text\"\r\n              value={title}\r\n              name=\"title\"\r\n              placeholder=\"Saisissez un titre...\"\r\n              onChange={(event) => {\r\n                changeField(event.target.value, event.target.name);\r\n              }} />\r\n          </label>\r\n          <label htmlFor=\"image\" className=\"label\">\r\n            URL de l'image* :\r\n            <input\r\n              type=\"text\"\r\n              value={image}\r\n              name=\"image\"\r\n              placeholder=\"Saisissez l'URL d'une image...\"\r\n              onChange={(event) => {\r\n                changeField(event.target.value, event.target.name);\r\n              }} />\r\n          </label>\r\n          <label htmlFor=\"description\" className=\"label\">\r\n            Description*:\r\n            <textarea\r\n              value={description}\r\n              name=\"description\"\r\n              placeholder=\"Décrivez le spot...\"\r\n              onChange={(event) => {\r\n                changeField(event.target.value, event.target.name);\r\n              }}\r\n            />\r\n          </label>\r\n          <label htmlFor=\"country\" className=\"label\">\r\n            Pays*:\r\n            <input type=\"text\"\r\n              value={country}\r\n              name=\"country\"\r\n              placeholder=\"Indiquez le pays où se trouve le spot...\"\r\n              onChange={(event) => {\r\n                changeField(event.target.value, event.target.name);\r\n              }} />\r\n          </label>\r\n\r\n          <div className=\"actions\">\r\n            <input\r\n              type=\"button\"\r\n              value=\"Annuler\"\r\n              title=\"Revenir à la page d'accueil\"\r\n              onClick={routeChange}\r\n            />\r\n            <input\r\n              type=\"submit\"\r\n              value=\"Valider\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nNewCampgroundForm.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  image: PropTypes.string.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  country: PropTypes.string.isRequired,\r\n  changeField: PropTypes.func.isRequired,\r\n  // submitCamgpround: PropTypes.func.isRequired\r\n};\r\n\r\nexport default NewCampgroundForm;","import { connect } from 'react-redux';\n\nimport { submitCampground, updateCampgroundField } from '../../actions/newCampground';\n\n// importing presentational component\nimport NewCampgroundForm from '../../components/NewCampgroundForm';\n\n// === mapStateToProps\n// if we need to read information from the state\nconst mapStateToProps = (state) => ({\n  // name of the prop to specify: element to get from the state\n  title: state.newCampground.title,\n  image: state.newCampground.image,\n  description: state.newCampground.description,\n  country: state.newCampground.country,\n  campgroundId: state.newCampground.campgroundId,\n  loadingCampgroundId: state.newCampground.loadingCampgroundId\n});\n\n// === mapDispatchToProps\n// if we need to dispatch actions from the store (modify the state)\nconst mapDispatchToProps = (dispatch) => ({\n  // name of the prop to specify: function which will dispatch the action\n  changeField: (newValue, name) => {\n    dispatch(updateCampgroundField(newValue, name));\n  },\n  submitCampground: () => {\n    dispatch(submitCampground());\n  },\n});\n\n// === creating the assistant\n// adding withRouter to be able to access params in container\nexport default connect(mapStateToProps, mapDispatchToProps)(NewCampgroundForm);","import React, { useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\n\nimport \"./editcampgroundform.scss\";\n\nconst EditCampgroundForm = ({\n  loadSelectedCampground,\n  selectedCampground,\n  changeField,\n  submitEditedCampground,\n  // state info returned after submitting edited campground\n  campgroundId,\n  loadingCampgroundId\n}) => {\n  const { id } = useParams();\n\n  const history = useHistory();\n  const routeChange = () => {\n    const path = `/campground/${selectedCampground.id}`;\n    history.push(path);\n  }\n  useEffect(() => {\n    loadSelectedCampground(id);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  useEffect(() => {\n    if (!loadingCampgroundId) {\n      const path = `/campground/${campgroundId}`;\n      history.push(path);\n    }\n  });\n\n \n  return (\n    <div className=\"campground-form\">\n      <h2 className=\"heading\">Modifier les informations sur le spot</h2>\n      <div className=\"content\" >\n        <form\n          className=\"form\"\n          onSubmit={(event) => {\n            event.preventDefault();\n            submitEditedCampground(selectedCampground.id);\n          }}\n        >\n          <label htmlFor=\"title\" className=\"label\">\n            Titre*:\n            <input\n              type=\"text\"\n              value={selectedCampground.title}\n              name=\"title\"\n              onChange={(event) => {\n                changeField(event.target.value, event.target.name);\n              }} />\n          </label>\n          <label htmlFor=\"image\" className=\"label\">\n            URL de l'image* :\n            <input\n              type=\"text\"\n              value={selectedCampground.image}\n              name=\"image\"\n              onChange={(event) => {\n                changeField(event.target.value, event.target.name);\n              }} />\n          </label>\n          <label htmlFor=\"description\" className=\"label\">\n            Description*:\n            <textarea\n              value={selectedCampground.description}\n              name=\"description\"\n              onChange={(event) => {\n                changeField(event.target.value, event.target.name);\n              }}\n            />\n          </label>\n          <label htmlFor=\"country\" className=\"label\">\n            Pays*:\n            <input type=\"text\"\n              value={selectedCampground.country}\n              name=\"country\"\n              onChange={(event) => {\n                changeField(event.target.value, event.target.name);\n              }} />\n          </label>\n\n          <div className=\"actions\">\n            <input\n              type=\"button\"\n              value=\"Annuler\"\n              title=\"Revenir à la page d'accueil\"\n              onClick={routeChange}\n            />\n            <input\n              type=\"submit\"\n              value=\"Enregistrer\"\n              title=\"Enregistrer les modifications\"\n            />\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n};\n\nEditCampgroundForm.propTypes = {\n  loadSelectedCampground: PropTypes.func.isRequired,\n  selectedCampground: PropTypes.shape({\n  title: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n  }).isRequired,\n  changeField: PropTypes.func.isRequired,\n  submitEditedCamgpround: PropTypes.func,\n  campgroundId: PropTypes.string.isRequired,\n  loadingCampgroundId: PropTypes.bool.isRequired\n};\n\nexport default EditCampgroundForm;","import { connect } from 'react-redux';\n\nimport {\n  fetchSelectedCampground,\n  submitEditedCampground,\n  updateEditField\n } from '../../actions/currentCampground'\n\n// importing presentational component\nimport EditCampgroundForm from '../../components/EditCampgroundForm';\n\n// === mapStateToProps\n// if we need to read information from the state\nconst mapStateToProps = (state) => ({\n  // name of the prop to specify: element to get from the state\n  selectedCampground: state.currentCampground.selectedCampground,\n  campgroundId: state.newCampground.campgroundId,\n  loadingCampgroundId: state.newCampground.loadingCampgroundId\n});\n\n// === mapDispatchToProps\n// if we need to dispatch actions from the store (modify the state)\nconst mapDispatchToProps = (dispatch) => ({\n  // name of the prop to specify: function which will dispatch the action\n  loadSelectedCampground: (id) => {\n    dispatch(fetchSelectedCampground(id));\n  },\n  changeField: (newValue, name) => {\n    dispatch(updateEditField(newValue, name));\n  },\n  submitEditedCampground: (campgroundId) => {\n    dispatch(submitEditedCampground(campgroundId));\n  },\n});\n\n// === creating the assistant\n// adding withRouter to be able to access params in container\nexport default connect(mapStateToProps, mapDispatchToProps)(EditCampgroundForm);","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n// == Import\nimport './notfound.scss';\nimport logo from '../Navbar/logo.png';\n\n// == Component\nconst NotFound = () => (\n  <div className=\"not-found\">\n    <div className=\"title\">Erreur 404</div>\n    <div className=\"description-content\">\n      <img className=\"logo-image\" src={logo} alt=\"Logo\"></img>\n      <div className=\"description-container\">\n      <p className=\"description\">\n        Oups, il semble que la page recherchée est introuvable... Vous pouvez rester un peu au coin du feu ou revenir à la page d'accueil.\n      </p>\n      <Link to=\"/\" className=\"home-button\">Accéder à l'accueil</Link>\n      </div>\n    </div>\n  </div>\n);\n\n// == Export\nexport default NotFound;","import { Route, Switch } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nimport \"./page.scss\";\n\nimport Home from \"../../containers/Home\";\nimport Campground from \"../../containers/Campground\";\nimport NewCampgroundForm from \"../../containers/NewCampgroundForm\";\nimport EditCampgroundForm from \"../../containers/EditCampgroundForm\";\nimport NotFound from \"../NotFound\";\n\nconst Page = ({ campgrounds }) => {\n  // console.log(campgrounds);\n\n  return (\n    <div className=\"page\">\n      <Switch>\n        <Route path=\"/\" exact>\n          <Home />\n        </Route>\n        <Route path=\"/campground/:id\">\n          <Campground />\n        </Route>\n        <Route path=\"/new-campground\">\n          <NewCampgroundForm />\n        </Route>\n        <Route path=\"/edit-campground/:id\">\n          <EditCampgroundForm />\n        </Route>\n        <Route>\n          <NotFound />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nPage.propTypes = {\n  campgrounds: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      image: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      country: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default Page;\n","import { connect } from 'react-redux';\r\n\r\n// importing presentational component\r\nimport Page from '../../components/Page';\r\n\r\n// === mapStateToProps\r\n// if we need to read information from the state\r\nconst mapStateToProps = (state) => ({\r\n  // name of the prop to specify: element to get from the state\r\n  campgrounds: state.campgrounds.campgroundsList,\r\n});\r\n\r\n// === mapDispatchToProps\r\n// if we need to dispatch actions from the store (modify the state)\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  // name of the prop to specify: function which will dispatch the action\r\n});\r\n\r\n// === creating the assistant\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page);","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './app.scss';\n\nimport Navbar from '../Navbar';\nimport Page from '../../containers/Page';\n\nconst App = ({ loadCampgrounds }) => {\n\n  useEffect(() => {\n    loadCampgrounds();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Page />\n    </div>\n  );\n}\n\nApp.propTypes = {\n  loadCampgrounds: PropTypes.func.isRequired,\n};\n\nexport default App;","import { connect } from 'react-redux';\r\n\r\nimport { fetchCampgrounds } from '../../actions/campgrounds';\r\n\r\n// we import the presentational component\r\nimport App from '../../components/App';\r\n\r\n// === mapStateToProps\r\nconst mapStateToProps = (state) => ({\r\n});\r\n\r\n// === mapDispatchToProps\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  loadCampgrounds: () => {\r\n    dispatch(fetchCampgrounds());\r\n  },\r\n});\r\n\r\n// === creating assistant\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\n\nimport './index.scss';\nimport App from './containers/App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();"],"sourceRoot":""}